// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MEN
  WOMEN
  OTHER
}

enum LookingFor {
  FRIENDSHIP
  RELATIONSHIP
  DATING
  NETWORKING
}

enum MatchingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  passwordHash      String    @map("password_hash")
  gender            Gender
  birthDate         DateTime  @map("birth_date")
  location          String?
  profileImage      String?   @map("profile_image")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  profile           Profile?
  matchesAsUser1    Match[]   @relation("User1")
  matchesAsUser2    Match[]   @relation("User2")
  swipes            Swipe[]   @relation("SwipeUser")
  swipeTargets      Swipe[]   @relation("SwipeTarget")
  chat              Chat[]
  locationData      Location?
  reportsAsReporter Report[]  @relation("Reporter")
  reportsAsReported Report[]  @relation("Reported")
  setting           Setting?

  @@map("users")
}

model Profile {
  id         Int        @id @default(autoincrement())
  bio        String?
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique @map("user_id")
  interests  String[]
  job        String?
  education  String?
  height     Float?
  lookingFor LookingFor @map("looking_for")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("profiles")
}

model Match {
  id        Int            @id @default(autoincrement())
  user1     User           @relation("User1", fields: [user1Id], references: [id])
  user1Id   Int            @map("user1_id")
  user2     User           @relation("User2", fields: [user2Id], references: [id])
  user2Id   Int            @map("user2_id")
  status    MatchingStatus
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  Chat      Chat[]

  @@map("matches")
}

model Swipe {
  id        Int      @id @default(autoincrement())
  user      User     @relation("SwipeUser", fields: [userId], references: [id])
  userId    Int      @map("user_id")
  target    User     @relation("SwipeTarget", fields: [targetId], references: [id])
  targetId  Int      @map("target_id")
  liked     Boolean
  createdAt DateTime @default(now()) @map("created_at")

  @@map("swipes")
}

model Chat {
  id        Int      @id @default(autoincrement())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int      @map("match_id")
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int      @map("sender_id")
  messages  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("chats")
}

model Location {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id")
  latitude  Float
  longitude Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("locations")
}

model Report {
  id         Int      @id @default(autoincrement())
  reporter   User     @relation("Reporter", fields: [reporterId], references: [id])
  reporterId Int      @unique @map("reporter_id")
  reported   User     @relation("Reported", fields: [reportedId], references: [id])
  reportedId Int      @map("reported_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("reports")
}

model Setting {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique @map("user_id")
  distance     Int
  ageRange     Int[]
  notification Boolean
  searchable   Boolean
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("settings")
}
